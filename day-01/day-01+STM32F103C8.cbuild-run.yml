cbuild-run:
  generated-by: csolution version 2.10.0
  solution: day-01.csolution.yml
  target-type: STM32F103C8
  compiler: AC6
  device: STMicroelectronics::STM32F103C8
  device-pack: Keil::STM32F1xx_DFP@2.4.1
  output:
    - file: out/Project/STM32F103C8/Debug/Project.axf
      info: generate by Project.Debug+STM32F103C8
      type: elf
      load: symbols
    - file: out/Project/STM32F103C8/Debug/Project.hex
      info: generate by Project.Debug+STM32F103C8
      type: hex
      load: image
  system-resources:
    memory:
      - name: IROM1
        access: rx
        start: 0x08000000
        size: 0x00010000
        from-pack: Keil::STM32F1xx_DFP@2.4.1
      - name: IRAM1
        access: rwx
        start: 0x20000000
        size: 0x00005000
        from-pack: Keil::STM32F1xx_DFP@2.4.1
  system-descriptions:
    - file: ${CMSIS_PACK_ROOT}/Keil/STM32F1xx_DFP/2.4.1/SVD/STM32F103xx.svd
      type: svd
  debugger:
    name: CMSIS-DAP@pyOCD
    protocol: swd
    clock: 10000000
    dbgconf: .cmsis/day-01+STM32F103C8.dbgconf
    gdbserver:
      - port: 3333
  debug-vars:
    vars: |
      __var DbgMCU_CR      = 0x00000007;   // DBGMCU_CR:  DBG_SLEEP, DBG_STOP, DBG_STANDBY
  debug-sequences:
    - name: DebugDeviceUnlock
      blocks:
        - execute: |
            Sequence("CheckID");
    - name: DebugCoreStart
      blocks:
        - execute: |
            // Replication of Standard Functionality
            Write32(0xE000EDF0, 0xA05F0001);                                        // Enable Core Debug via DHCSR

            // Device Specific Debug Setup
            Write32(0xE0042004, DbgMCU_CR);                                         // DBGMCU_CR: Configure MCU Debug
    - name: TraceStart
      blocks:
        - execute: |
            __var traceSWO    = (__traceout & 0x1) != 0;                        // SWO Trace Selected?
            __var traceTPIU   = (__traceout & 0x2) != 0;                        // TPIU Trace Selected?
        - if: traceSWO
          execute: |
            Sequence("EnableTraceSWO");                                           // Call SWO Trace Setup
        - if: traceTPIU
          execute: |
            Sequence("EnableTraceTPIU");                                          // Call TPIU Trace Setup
    - name: EnableTraceSWO
      blocks:
        - execute: |
            __var dbgmcu_val    = 0;                                                // DBGMCU_CR Value

            dbgmcu_val  = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
            dbgmcu_val |= (1 << 5);                                           // Trace I/O Enable + Trace Mode Asynchronous

            Write32(0xE0042004, dbgmcu_val);                                        // Write DBGMCU_CR: Trace Settings
    - name: EnableTraceTPIU
      blocks:
        - execute: |
            __var width         = (__traceout & 0x003F0000) >> 16;        // TPIU Port Width
            __var dbgmcu_val    = 0;                                                // DBGMCU_CR Value

            dbgmcu_val  = Read32(0xE0042004) & (~0xE0);                         // Read DBGMCU_CR and clear trace setup
            dbgmcu_val |= (1 << 5);                                           // Trace I/O Enable
        - if: width == 1
          execute: |
            // 1-Bit TPIU Trace Setup
            dbgmcu_val    |= (1 << 6);                                      // Trace Mode (1-Bit)
        - if: width == 2
          execute: |
            // 2-Bit TPIU Trace Setup
            dbgmcu_val    |= (2 << 6);                                      // Trace Mode (2-Bit)
        - if: width == 4
          execute: |
            // 4-Bit TPIU Trace Setup
            dbgmcu_val    |= (3 << 6);                                      // Trace Mode (4-Bit)
        - execute: |
            // Write Trace Configuration to Target
            Write32(0xE0042004, dbgmcu_val);                                        // Write DBGMCU_CR: Trace Settings
    - name: CheckID
      blocks:
        - execute: |
            __var pidr1 = 0;
            __var pidr2 = 0;
            __var jep106id = 0;
            __var ROMTableBase = 0;

            __ap = 0;      // AHB-AP

            ROMTableBase = ReadAP(0xF8) & ~0x3;

            pidr1 = Read32(ROMTableBase + 0x0FE4);
            pidr2 = Read32(ROMTableBase + 0x0FE8);
            jep106id = ((pidr2 & 0x7) << 4 ) | ((pidr1 >> 4) & 0xF);
        - if: jep106id != 0x20
          execute: |
            Query(0, "Not a genuine ST Device! Abort connection", 1);
            Message(2, "Not a genuine ST Device! Abort connection.");
  programming:
    - algorithm: ${CMSIS_PACK_ROOT}/Keil/STM32F1xx_DFP/2.4.1/Flash/STM32F10x_128.FLM
      start: 0x08000000
      size: 0x00020000
      ram-start: 0x20000000
      ram-size: 0x00005000
